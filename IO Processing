//	Created by: Michael Braddy
//	Created on: 2/5/17
//	Created for: Assignment 08, IO Assignment

#define _CRT_SECURE_NO_WARNINGS
#define PAUSE system("pause")
#define FLUSH fflush(stdin)
#define CLS system("cls")
#define TOTAL_STUDENTS 100
#define EXAMS 4

#include <stdio.h>
#include <stdlib.h>
#include <io.h>


//	Prototype Functions:
void mainMenu(FILE *, int studentArray[][EXAMS], int studentCounter);
//	End Prototype

//	Main Start
main() {
	int studentsExams[TOTAL_STUDENTS][EXAMS];	//	2D array
	int studentCounter = 0;
	FILE *examOutput;	//	Represents connection to a file
	
	if ((_access("assignmentEightOutput.txt", 0)) != -1) {

		examOutput = fopen("assignmentEightOutput.txt", "a");
		studentCounter = fgetc(16);	//	work need
		fclose;

		if (examOutput == NULL) {
			printf("Cannot access file. Exiting program.\n");
			PAUSE;
			exit(-1);
		}
		
	}
	else {

		examOutput = fopen("assignmentEightOutput.txt", "w");

		if (examOutput == NULL) {
			printf("Cannot write to file. Exiting program.\n");
			PAUSE;
			exit(-1);
		}

		fprintf(examOutput, "Total Students: %i\tGradebook:\nStudent ID\t\tExam One\tExam Two\tExam Three\Exam Four\n", 0);
		fclose(examOutput);
	}

	mainMenu(examOutput, studentsExams, studentCounter);	//	Function Call

	return 0;
}	//	End Main

void mainMenu(FILE *examOutput, int studentExams[][EXAMS], int studentCounter) {

	int mSelection = 0;	//	Menu choice
	int examOne, examTwo, examThree, examFour;

	do {	// Begin Menu Loop

		CLS;

		printf("What would you like to do? \n");
		printf("\n 1. Enter a new student and four exam results");
		printf("\n 2. Display the average exam scores for a student");
		printf("\n 3. Display the class averages");
		printf("\n 4. Clear the gradebook");
		printf("\n 5. Output gradebook to text file");
		printf("\n 6. Exit the program");

		printf("\n Enter Selection: ");
		scanf("%i", &mSelection); FLUSH;

		switch (mSelection) { // Begin switch

		case 1:
			CLS;
			printf("Enter student number %i's exam scores: \n", studentCounter + 1);
			printf("Exam One: ");
			scanf_s("%i", &examOne);
			printf("Exam Two: ");
			scanf_s("%i", &examTwo);
			printf("Exam Three: ");
			scanf_s("%i", &examThree);
			printf("Exam Four: ");
			scanf_s("%i", &examFour);
			studentExams[studentCounter][0] = examOne;
			studentExams[studentCounter][1] = examTwo;
			studentExams[studentCounter][2] = examThree;
			studentExams[studentCounter][3] = examFour;
			break;

		case 2:
			
			break;

		case 3:
			
			break;

		case 4:
			examOutput = fopen("assignmentEightOutput.txt", "w");
			fprintf(examOutput, "Total Students: %i\tGradebook:\nStudent ID\t\tExam One\tExam Two\tExam Three\Exam Four\n", 0);
			fclose(examOutput);
			printf("Gradebook Cleared.");
			break;

		case 5:
			
			break;

		case 6:
			printf("\nExitting program.\n");
			
			break;

		default:	//	more error checks
		
			break;
		} // End switch

		PAUSE;

	} while (mSelection != 6);	//	End Menu Loop

}



//	Notes: Text Files and Binary Files:
//	Text files are a sequence of bytes on a disk that represent ASCII codes for characters. Each character == 1 Byte.
//	Special Characters for Text files: 
//	End of line - One or two characters depending on OS.
	//	\n carriage return - the numeric is 0xA or 10
	//	\r linefeed - numeric 0xD or 13
//	End of file - Windows O/S only, numeric 0x1a

//	Binary Files contain bytes that represent raw data. ex: if double is written, the 8 bytes that represent the double value are placed in the file
	//	Cant be opened in notepad but is considered easier to write on them because formatting is not issued.

//	<stdio.h> gives new data type FILE *inputFile; which represents connection to a file.
//	inputFile = fopen("c:\\mytextfile.txt", "w"); w enables write text mode. Argument is file location.
//	fclose(inputFile); Closes file

//	fopen modes: r Reading, w write, a append, r+ read and write - from beginning, w+ read and write - truncate, a+ read and write - append.
//	%[ ] can be used to read everything from a text file within the brackets. ex: %[a-z A-Z] (would stop at a digit) Or you can specify a stop point %[^;] ^ would indicate what to stop at.

//	fgetc / fputc (reads and writes single characters from/to files
//	ungetc	(puts a character back if you read the wrong one)
//	fgets / fputs (read/write a line)
//	feof (determines if you are reading the end of file)
//	fseek (move to a specified location, relative to the beginning end or current position)
//	fgetpos (Gets file position pointer)
//	fsetpos	(Sets position pointer)
//	ftell (returns the current file position as a long int)
//	rewind	(puts the file position at 0)
